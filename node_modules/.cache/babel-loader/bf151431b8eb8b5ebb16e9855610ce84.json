{"ast":null,"code":"var _jsxFileName = \"/Users/shebthebat/Documents/NEU/Sem 5/CS 7580/shebna_mathew_assignment3/src/components/QuestionStack.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport * as shuffle from 'shuffle-array';\nimport Question from \"./Question\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst QuestionStack = props => {\n  _s();\n\n  const [currentQuestion, setCurrentQuestion] = useState(props.results[0]);\n  const [questionNumber, setQuestionNumber] = useState(0);\n  const [choices, setChoices] = useState([]);\n  const [validation, setValidation] = useState(\"props.defaultValidation\");\n  useEffect(() => {\n    console.log(\"question: \", props.results[questionNumber]);\n    setCurrentQuestion(props.results[questionNumber]);\n  }, [questionNumber]);\n  useEffect(() => {\n    let options = [];\n    options.push(...currentQuestion[\"incorrect_answers\"], currentQuestion[\"correct_answer\"]);\n    console.log(\"Choices: \", options);\n    setChoices(options);\n  }, [currentQuestion]);\n  return /*#__PURE__*/_jsxDEV(Question, {\n    question: currentQuestion[\"question\"],\n    choices: choices,\n    correct: currentQuestion[\"correct_answer\"],\n    questionNumber: questionNumber,\n    showNext: setQuestionNumber,\n    defaultValidation: \"btn-outline-info\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n};\n\n_s(QuestionStack, \"ZYpZwvlba98cwRj2LboRRcc7B1k=\");\n\n_c = QuestionStack;\nexport default QuestionStack;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionStack\");","map":{"version":3,"sources":["/Users/shebthebat/Documents/NEU/Sem 5/CS 7580/shebna_mathew_assignment3/src/components/QuestionStack.js"],"names":["useEffect","useState","shuffle","Question","QuestionStack","props","currentQuestion","setCurrentQuestion","results","questionNumber","setQuestionNumber","choices","setChoices","validation","setValidation","console","log","options","push"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAO,KAAKC,OAAZ,MAAyB,eAAzB;AACA,OAAOC,QAAP,MAAqB,YAArB;;;AAEA,MAAMC,aAAa,GAAGC,KAAK,IAAI;AAAA;;AAE3B,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCN,QAAQ,CAACI,KAAK,CAACG,OAAN,CAAc,CAAd,CAAD,CAAtD;AACA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCT,QAAQ,CAAC,CAAD,CAApD;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACY,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAC,yBAAD,CAA5C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZe,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAAyBX,KAAK,CAACG,OAAN,CAAcC,cAAd,CAAzB;AACAF,IAAAA,kBAAkB,CAACF,KAAK,CAACG,OAAN,CAAcC,cAAd,CAAD,CAAlB;AAEH,GAJQ,EAIP,CAACA,cAAD,CAJO,CAAT;AAMAT,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIiB,OAAO,GAAG,EAAd;AACAA,IAAAA,OAAO,CAACC,IAAR,CAAa,GAAGZ,eAAe,CAAC,mBAAD,CAA/B,EAAsDA,eAAe,CAAC,gBAAD,CAArE;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAwBC,OAAxB;AACAL,IAAAA,UAAU,CAACK,OAAD,CAAV;AACH,GALQ,EAKP,CAACX,eAAD,CALO,CAAT;AAQA,sBACI,QAAC,QAAD;AAAU,IAAA,QAAQ,EAAEA,eAAe,CAAC,UAAD,CAAnC;AAAiD,IAAA,OAAO,EAAEK,OAA1D;AAAmE,IAAA,OAAO,EAAEL,eAAe,CAAC,gBAAD,CAA3F;AAA+G,IAAA,cAAc,EAAEG,cAA/H;AAA+I,IAAA,QAAQ,EAAEC,iBAAzJ;AAA4K,IAAA,iBAAiB,EAAC;AAA9L;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CA1BD;;GAAMN,a;;KAAAA,a;AA4BN,eAAeA,aAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport * as shuffle from 'shuffle-array';\nimport Question from \"./Question\";\n\nconst QuestionStack = props => {\n\n    const [currentQuestion, setCurrentQuestion] = useState(props.results[0]);\n    const [questionNumber, setQuestionNumber] = useState(0);\n    const [choices, setChoices] = useState([]);\n    const [validation, setValidation] = useState(\"props.defaultValidation\")\n\n    useEffect(() => {\n        console.log(\"question: \",props.results[questionNumber])\n        setCurrentQuestion(props.results[questionNumber])\n\n    },[questionNumber])\n    \n    useEffect(() => {\n        let options = []\n        options.push(...currentQuestion[\"incorrect_answers\"], currentQuestion[\"correct_answer\"])\n        console.log(\"Choices: \",options)\n        setChoices(options)\n    },[currentQuestion])\n    \n\n    return (\n        <Question question={currentQuestion[\"question\"]} choices={choices} correct={currentQuestion[\"correct_answer\"]} questionNumber={questionNumber} showNext={setQuestionNumber} defaultValidation=\"btn-outline-info\"/>\n    )\n\n\n}\n\nexport default QuestionStack;"]},"metadata":{},"sourceType":"module"}
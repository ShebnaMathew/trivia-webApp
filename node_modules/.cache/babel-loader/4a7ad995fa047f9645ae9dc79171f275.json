{"ast":null,"code":"var _jsxFileName = \"/Users/shebthebat/Documents/NEU/Sem 5/CS 7580/shebna_mathew_assignment3/src/components/QuestionStack.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport * as shuffle from 'shuffle-array';\nimport Question from \"./Question\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst QuestionStack = props => {\n  _s();\n\n  const [currentQuestion, setCurrentQuestion] = useState(props.results[0]);\n  const [questionNumber, setQuestionNumber] = useState(0);\n  const [choices, setChoices] = useState([]);\n  const [score, setScore] = useState(0);\n  useEffect(() => {\n    if (questionNumber < props.results.length) {\n      setCurrentQuestion(props.results[questionNumber]);\n    } else {\n      props.clearResults([]);\n      props.setTotal(questionNumber);\n      props.setScore(score);\n      props.setScorePresent(true);\n    }\n  }, [questionNumber]);\n  useEffect(() => {\n    let options = [];\n    options.push(...currentQuestion[\"incorrect_answers\"], currentQuestion[\"correct_answer\"]);\n    shuffle(options);\n    console.log(\"Choices: \", options);\n    setChoices(options);\n  }, [currentQuestion]);\n  return /*#__PURE__*/_jsxDEV(Question, {\n    question: currentQuestion[\"question\"],\n    choices: choices,\n    correct: currentQuestion[\"correct_answer\"].replace(\"&quot\", \"\\\"\"),\n    questionNumber: questionNumber,\n    showNext: setQuestionNumber,\n    score: score,\n    updateScore: setScore\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n};\n\n_s(QuestionStack, \"fWs8Fs5EsKVUsSzIA7AbIGpLRWI=\");\n\n_c = QuestionStack;\nexport default QuestionStack;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionStack\");","map":{"version":3,"sources":["/Users/shebthebat/Documents/NEU/Sem 5/CS 7580/shebna_mathew_assignment3/src/components/QuestionStack.js"],"names":["useEffect","useState","shuffle","Question","QuestionStack","props","currentQuestion","setCurrentQuestion","results","questionNumber","setQuestionNumber","choices","setChoices","score","setScore","length","clearResults","setTotal","setScorePresent","options","push","console","log","replace"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAO,KAAKC,OAAZ,MAAyB,eAAzB;AACA,OAAOC,QAAP,MAAqB,YAArB;;;AAEA,MAAMC,aAAa,GAAGC,KAAK,IAAI;AAAA;;AAE3B,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCN,QAAQ,CAACI,KAAK,CAACG,OAAN,CAAc,CAAd,CAAD,CAAtD;AACA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCT,QAAQ,CAAC,CAAD,CAApD;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACY,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAC,CAAD,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIS,cAAc,GAAGJ,KAAK,CAACG,OAAN,CAAcO,MAAnC,EAA2C;AACvCR,MAAAA,kBAAkB,CAACF,KAAK,CAACG,OAAN,CAAcC,cAAd,CAAD,CAAlB;AACH,KAFD,MAEO;AACHJ,MAAAA,KAAK,CAACW,YAAN,CAAmB,EAAnB;AACAX,MAAAA,KAAK,CAACY,QAAN,CAAeR,cAAf;AACAJ,MAAAA,KAAK,CAACS,QAAN,CAAeD,KAAf;AACAR,MAAAA,KAAK,CAACa,eAAN,CAAsB,IAAtB;AACH;AACJ,GATQ,EASP,CAACT,cAAD,CATO,CAAT;AAWAT,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAImB,OAAO,GAAG,EAAd;AACAA,IAAAA,OAAO,CAACC,IAAR,CAAa,GAAGd,eAAe,CAAC,mBAAD,CAA/B,EAAsDA,eAAe,CAAC,gBAAD,CAArE;AACAJ,IAAAA,OAAO,CAACiB,OAAD,CAAP;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAwBH,OAAxB;AACAP,IAAAA,UAAU,CAACO,OAAD,CAAV;AACH,GANQ,EAMP,CAACb,eAAD,CANO,CAAT;AAQA,sBACI,QAAC,QAAD;AAAU,IAAA,QAAQ,EAAEA,eAAe,CAAC,UAAD,CAAnC;AAAiD,IAAA,OAAO,EAAEK,OAA1D;AAAmE,IAAA,OAAO,EAAEL,eAAe,CAAC,gBAAD,CAAf,CAAkCiB,OAAlC,CAA0C,OAA1C,EAAkD,IAAlD,CAA5E;AACA,IAAA,cAAc,EAAEd,cADhB;AACgC,IAAA,QAAQ,EAAEC,iBAD1C;AAC6D,IAAA,KAAK,EAAEG,KADpE;AAC2E,IAAA,WAAW,EAAEC;AADxF;AAAA;AAAA;AAAA;AAAA,UADJ;AAIH,CA9BD;;GAAMV,a;;KAAAA,a;AAgCN,eAAeA,aAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport * as shuffle from 'shuffle-array';\nimport Question from \"./Question\";\n\nconst QuestionStack = props => {\n\n    const [currentQuestion, setCurrentQuestion] = useState(props.results[0]);\n    const [questionNumber, setQuestionNumber] = useState(0);\n    const [choices, setChoices] = useState([]);\n    const [score, setScore] = useState(0);\n\n    useEffect(() => {\n        if (questionNumber < props.results.length) {\n            setCurrentQuestion(props.results[questionNumber])\n        } else {\n            props.clearResults([])\n            props.setTotal(questionNumber)\n            props.setScore(score)\n            props.setScorePresent(true)\n        }\n    },[questionNumber])\n    \n    useEffect(() => {\n        let options = []\n        options.push(...currentQuestion[\"incorrect_answers\"], currentQuestion[\"correct_answer\"])\n        shuffle(options)\n        console.log(\"Choices: \",options)\n        setChoices(options)\n    },[currentQuestion])\n\n    return (\n        <Question question={currentQuestion[\"question\"]} choices={choices} correct={currentQuestion[\"correct_answer\"].replace(\"&quot\",\"\\\"\")} \n        questionNumber={questionNumber} showNext={setQuestionNumber} score={score} updateScore={setScore}/>\n    )\n}\n\nexport default QuestionStack;"]},"metadata":{},"sourceType":"module"}
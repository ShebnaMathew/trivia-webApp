{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.fromCodePoint = String.fromCodePoint || function (astralCodePoint) {\n  return String.fromCharCode(Math.floor((astralCodePoint - 0x10000) / 0x400) + 0xd800, (astralCodePoint - 0x10000) % 0x400 + 0xdc00);\n};\n\nexports.getCodePoint = String.prototype.codePointAt ? function (input, position) {\n  return input.codePointAt(position);\n} : function (input, position) {\n  return (input.charCodeAt(position) - 0xd800) * 0x400 + input.charCodeAt(position + 1) - 0xdc00 + 0x10000;\n};\nexports.highSurrogateFrom = 0xd800;\nexports.highSurrogateTo = 0xdbff;","map":{"version":3,"sources":["/Users/shebthebat/Documents/NEU/Sem 5/CS 7580/shebna_mathew_assignment3/node_modules/html-entities/lib/surrogate-pairs.js"],"names":["Object","defineProperty","exports","value","fromCodePoint","String","astralCodePoint","fromCharCode","Math","floor","getCodePoint","prototype","codePointAt","input","position","charCodeAt","highSurrogateFrom","highSurrogateTo"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACAD,OAAO,CAACE,aAAR,GAAwBC,MAAM,CAACD,aAAP,IACpB,UAAUE,eAAV,EAA2B;AACvB,SAAOD,MAAM,CAACE,YAAP,CAAoBC,IAAI,CAACC,KAAL,CAAW,CAACH,eAAe,GAAG,OAAnB,IAA8B,KAAzC,IAAkD,MAAtE,EAA+E,CAACA,eAAe,GAAG,OAAnB,IAA8B,KAA/B,GAAwC,MAAtH,CAAP;AACH,CAHL;;AAIAJ,OAAO,CAACQ,YAAR,GAAuBL,MAAM,CAACM,SAAP,CAAiBC,WAAjB,GACjB,UAAUC,KAAV,EAAiBC,QAAjB,EAA2B;AACzB,SAAOD,KAAK,CAACD,WAAN,CAAkBE,QAAlB,CAAP;AACH,CAHkB,GAIjB,UAAUD,KAAV,EAAiBC,QAAjB,EAA2B;AACzB,SAAO,CAACD,KAAK,CAACE,UAAN,CAAiBD,QAAjB,IAA6B,MAA9B,IAAwC,KAAxC,GAAgDD,KAAK,CAACE,UAAN,CAAiBD,QAAQ,GAAG,CAA5B,CAAhD,GAAiF,MAAjF,GAA0F,OAAjG;AACH,CANL;AAOAZ,OAAO,CAACc,iBAAR,GAA4B,MAA5B;AACAd,OAAO,CAACe,eAAR,GAA0B,MAA1B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fromCodePoint = String.fromCodePoint ||\n    function (astralCodePoint) {\n        return String.fromCharCode(Math.floor((astralCodePoint - 0x10000) / 0x400) + 0xd800, ((astralCodePoint - 0x10000) % 0x400) + 0xdc00);\n    };\nexports.getCodePoint = String.prototype.codePointAt\n    ? function (input, position) {\n        return input.codePointAt(position);\n    }\n    : function (input, position) {\n        return (input.charCodeAt(position) - 0xd800) * 0x400 + input.charCodeAt(position + 1) - 0xdc00 + 0x10000;\n    };\nexports.highSurrogateFrom = 0xd800;\nexports.highSurrogateTo = 0xdbff;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import _toConsumableArray from\"/Users/shebthebat/Documents/NEU/Sem 5/CS 7580/trivia-webApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/shebthebat/Documents/NEU/Sem 5/CS 7580/trivia-webApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState}from\"react\";import*as shuffle from'shuffle-array';import Question from\"./Question\";import{jsx as _jsx}from\"react/jsx-runtime\";var QuestionStack=function QuestionStack(props){var _useState=useState(props.results[0]),_useState2=_slicedToArray(_useState,2),currentQuestion=_useState2[0],setCurrentQuestion=_useState2[1];var _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),questionNumber=_useState4[0],setQuestionNumber=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),choices=_useState6[0],setChoices=_useState6[1];var _useState7=useState(0),_useState8=_slicedToArray(_useState7,2),score=_useState8[0],setScore=_useState8[1];useEffect(function(){if(questionNumber<props.results.length){setCurrentQuestion(props.results[questionNumber]);}else{props.clearResults([]);props.setTotal(questionNumber);props.setScore(score);props.setScorePresent(true);}},[questionNumber,props,score]);useEffect(function(){var options=[];options.push.apply(options,_toConsumableArray(currentQuestion[\"incorrect_answers\"]).concat([currentQuestion[\"correct_answer\"]]));shuffle(options);setChoices(options);},[currentQuestion]);return/*#__PURE__*/_jsx(Question,{question:currentQuestion[\"question\"],choices:choices,correct:currentQuestion[\"correct_answer\"],questionNumber:questionNumber,showNext:setQuestionNumber,score:score,updateScore:setScore});};export default QuestionStack;","map":{"version":3,"sources":["/Users/shebthebat/Documents/NEU/Sem 5/CS 7580/trivia-webApp/src/components/QuestionStack.js"],"names":["useEffect","useState","shuffle","Question","QuestionStack","props","results","currentQuestion","setCurrentQuestion","questionNumber","setQuestionNumber","choices","setChoices","score","setScore","length","clearResults","setTotal","setScorePresent","options","push"],"mappings":"4WAAA,OAASA,SAAT,CAAoBC,QAApB,KAAoC,OAApC,CACA,MAAO,GAAKC,CAAAA,OAAZ,KAAyB,eAAzB,CACA,MAAOC,CAAAA,QAAP,KAAqB,YAArB,C,2CAEA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAAC,KAAK,CAAI,eAEmBJ,QAAQ,CAACI,KAAK,CAACC,OAAN,CAAc,CAAd,CAAD,CAF3B,wCAEpBC,eAFoB,eAEHC,kBAFG,8BAGiBP,QAAQ,CAAC,CAAD,CAHzB,yCAGpBQ,cAHoB,eAGJC,iBAHI,8BAIGT,QAAQ,CAAC,EAAD,CAJX,yCAIpBU,OAJoB,eAIXC,UAJW,8BAKDX,QAAQ,CAAC,CAAD,CALP,yCAKpBY,KALoB,eAKbC,QALa,eAO3Bd,SAAS,CAAC,UAAM,CACZ,GAAIS,cAAc,CAAGJ,KAAK,CAACC,OAAN,CAAcS,MAAnC,CAA2C,CACvCP,kBAAkB,CAACH,KAAK,CAACC,OAAN,CAAcG,cAAd,CAAD,CAAlB,CACH,CAFD,IAEO,CACHJ,KAAK,CAACW,YAAN,CAAmB,EAAnB,EACAX,KAAK,CAACY,QAAN,CAAeR,cAAf,EACAJ,KAAK,CAACS,QAAN,CAAeD,KAAf,EACAR,KAAK,CAACa,eAAN,CAAsB,IAAtB,EACH,CACJ,CATQ,CASP,CAACT,cAAD,CAAiBJ,KAAjB,CAAwBQ,KAAxB,CATO,CAAT,CAWAb,SAAS,CAAC,UAAM,CACZ,GAAImB,CAAAA,OAAO,CAAG,EAAd,CACAA,OAAO,CAACC,IAAR,OAAAD,OAAO,oBAASZ,eAAe,CAAC,mBAAD,CAAxB,UAA+CA,eAAe,CAAC,gBAAD,CAA9D,GAAP,CACAL,OAAO,CAACiB,OAAD,CAAP,CACAP,UAAU,CAACO,OAAD,CAAV,CACH,CALQ,CAKP,CAACZ,eAAD,CALO,CAAT,CAOA,mBACI,KAAC,QAAD,EAAU,QAAQ,CAAEA,eAAe,CAAC,UAAD,CAAnC,CAAiD,OAAO,CAAEI,OAA1D,CACA,OAAO,CAAEJ,eAAe,CAAC,gBAAD,CADxB,CAEA,cAAc,CAAEE,cAFhB,CAEgC,QAAQ,CAAEC,iBAF1C,CAE6D,KAAK,CAAEG,KAFpE,CAE2E,WAAW,CAAEC,QAFxF,EADJ,CAKH,CA9BD,CAgCA,cAAeV,CAAAA,aAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport * as shuffle from 'shuffle-array';\nimport Question from \"./Question\";\n\nconst QuestionStack = props => {\n\n    const [currentQuestion, setCurrentQuestion] = useState(props.results[0]);\n    const [questionNumber, setQuestionNumber] = useState(0);\n    const [choices, setChoices] = useState([]);\n    const [score, setScore] = useState(0);\n\n    useEffect(() => {\n        if (questionNumber < props.results.length) {\n            setCurrentQuestion(props.results[questionNumber])\n        } else {\n            props.clearResults([])\n            props.setTotal(questionNumber)\n            props.setScore(score)\n            props.setScorePresent(true)\n        }\n    },[questionNumber, props, score])\n    \n    useEffect(() => {\n        let options = []\n        options.push(...currentQuestion[\"incorrect_answers\"], currentQuestion[\"correct_answer\"])\n        shuffle(options)\n        setChoices(options)\n    },[currentQuestion])\n\n    return (\n        <Question question={currentQuestion[\"question\"]} choices={choices} \n        correct={currentQuestion[\"correct_answer\"]} \n        questionNumber={questionNumber} showNext={setQuestionNumber} score={score} updateScore={setScore}/>\n    )\n}\n\nexport default QuestionStack;"]},"metadata":{},"sourceType":"module"}
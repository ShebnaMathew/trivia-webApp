{"version":3,"sources":["components/Selection.js","components/Configure.js","components/Choice.js","components/Question.js","components/QuestionStack.js","components/Scoreboard.js","components/Home.js","components/BadInput.js","components/Loading.js","components/Setup.js","views/App.js","reportWebVitals.js","index.js"],"names":["Selection","props","className","for","label","id","onChange","e","selectedCategory","options","indexOf","target","value","selectedDifficulty","trim","toLowerCase","selectedType","selected","map","option","i","selections","Configure","useState","numOfQuestions","setNumOfQuestions","category","setCategory","difficulty","setDifficulty","type","setType","placeholder","aria-label","aria-describedby","current","onClick","fetch","Choice","color","setColor","choice","correct","updateScore","score","setTimeout","showNext","questionNumber","Question","decode","question","choices","each","QuestionStack","results","currentQuestion","setCurrentQuestion","setQuestionNumber","setChoices","setScore","useEffect","length","clearResults","setTotal","setScorePresent","push","shuffle","Scoreboard","total","configure","Home","class","start","BadInput","Loading","role","Setup","started","scorePresent","configured","response","requestActivity","url","a","json","activityData","App","setStarted","setConfigured","data","setData","href","then","console","log","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2adf36bd.chunk.js","sourcesContent":["\nconst Selection = (props) => {\n    return (\n        <>\n            <div className=\"input-group mb-3\">\n                <label className=\"input-group-text\" for=\"inputGroupSelect01\">{props.label}</label>\n                <select className=\"form-select\" id=\"inputGroupSelect01\" onChange={(e) => \n                (props.label === \"Select Category\") ? (props.selectedCategory(props.options.indexOf(e.target.value)+8)):\n                (props.label === \"Select Difficulty\") ? (props.selectedDifficulty(e.target.value.trim().toLowerCase())):\n                (props.label === \"Select Type\") ? ((e.target.value.trim().toLowerCase()) === \"multiple choice\") ? \n                (props.selectedType(\"multiple\")):(props.selectedType(\"boolean\")):\"\"}>\n                    <option selected>{props.options[0]}</option>\n                    {\n                        props.options.map((option,i) =>\n                        (i !== 0) ? \n                        <option value={option}>{option}</option>:\"\"\n                        )\n                    }\n                </select>\n            </div>\n        </>\n    )\n}\n\nexport default Selection;","import { useState } from \"react\"\nimport Selection from \"./Selection\"\n\nconst selections = [\"Select Category\", \"Select Difficulty\", \"Select Type\"]\nconst options = [[\"Any Category\",\n\"General Knowledge\",\n\"Entertainment: Books\",\n\"Entertainment: Film\",\n\"Entertainment: Music\",\n\"Entertainment: Musicals & Theatres\",\n\"Entertainment: Television\",\n\"Entertainment: Video Games\",\n\"Entertainment: Board Games\",\n\"Science & Nature\",\n\"Science: Computers\",\n\"Science: Mathematics\",\n\"Mythology\",\n\"Sports\",\n\"Geography\",\n\"History\",\n\"Politics\",\n\"Art\",\n\"Celebrities\",\n\"Animals\",\n\"Vehicles\",\n\"Entertainment: Comics\",\n\"Science: Gadgets\",\n\"Entertainment: Japanese Anime & Manga\",\n\"Entertainment: Cartoon & Animations\"],\n[\"Any Difficulty\", \"Easy\", \"Medium\", \"Hard\"],\n[\"Any Type\", \"Multiple Choice\", \"True/False\"]]\n\nconst Configure = (props) => {\n    const [numOfQuestions, setNumOfQuestions] = useState(10);\n    const [category, setCategory] = useState(\"Any Category\");\n    const [difficulty, setDifficulty] = useState(\"Any Difficulty\");\n    const [type, setType] = useState(\"Any Type\");\n\n    return (\n        <div className=\"configure start justify-content-center\">\n            <div>\n                <h2 className=\"text-center justify-content-center\">What would you like ?</h2>\n            </div>\n            <div className=\"input-group mb-3\">\n                <span className=\"input-group-text\" id=\"basic-addon1\">Number of Questions: </span>\n                <input type=\"number\" className=\"form-control\" placeholder={numOfQuestions} \n                aria-label=\"number of questions\" aria-describedby=\"basic-addon1\" \n                onChange={(e) => setNumOfQuestions(e.target.value)}/>\n            </div>\n            <div>\n                {selections.map((current, i) => \n                    <Selection label={current} options={options[i]} \n                    selectedCategory={setCategory} selectedDifficulty={setDifficulty} selectedType={setType}/>\n                )}\n            </div>\n            <button type=\"button\" className=\"btn btn-danger btn-lg quiz-btn\" onClick={() => \n                props.fetch(numOfQuestions,category,difficulty,type)}>Quiz Me !\n            </button>\n        </div>\n    )\n}\n\nexport default Configure;","import { useState } from \"react\";\n\nconst Choice = (props) => {\n\n    const state = \"btn option \"\n    const [color, setColor] = useState(\"btn-warning\")\n\n    const checkResponse = (answer) => {\n        if (answer === props.correct) {\n            setColor(\"btn-outline-success\")\n            props.updateScore(props.score+1)\n        } else {\n        setColor(\"btn-outline-danger\")\n        }\n    }\n\n    return(\n        <button type=\"button\" className={state + color} value={props.choice} \n                onClick={\n                    (e) => {\n                        checkResponse(e.target.value)\n                        setTimeout(setColor, 300, \"btn-warning\")\n                        setTimeout(props.showNext,500, (props.questionNumber + 1));\n                    }\n                }>{props.choice}\n        </button>\n    )\n}\n\nexport default Choice;","import Choice from \"./Choice\"\nimport {decode} from 'html-entities';\n\nconst Question = props => {\n\n    return (\n        <div className=\"question\">\n            <div className=\"row card option\">\n                <div className=\"card-body text-center justify-content-center\">\n                    {decode(props.question)}\n                </div>\n            </div>\n            <div className=\"row btn-group-vertical option\">\n                {\n                    props.choices.map((each) => \n                    <Choice choice={decode(each)} questionNumber={props.questionNumber} \n                    correct={decode(props.correct)} showNext={props.showNext} score={props.score} \n                    updateScore={props.updateScore}/>\n                    )\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default Question;","import { useEffect, useState } from \"react\";\nimport * as shuffle from 'shuffle-array';\nimport Question from \"./Question\";\n\nconst QuestionStack = props => {\n\n    const [currentQuestion, setCurrentQuestion] = useState(props.results[0]);\n    const [questionNumber, setQuestionNumber] = useState(0);\n    const [choices, setChoices] = useState([]);\n    const [score, setScore] = useState(0);\n\n    useEffect(() => {\n        if (questionNumber < props.results.length) {\n            setCurrentQuestion(props.results[questionNumber])\n        } else {\n            props.clearResults([])\n            props.setTotal(questionNumber)\n            props.setScore(score)\n            props.setScorePresent(true)\n        }\n    },[questionNumber, props, score])\n    \n    useEffect(() => {\n        let options = []\n        options.push(...currentQuestion[\"incorrect_answers\"], currentQuestion[\"correct_answer\"])\n        shuffle(options)\n        setChoices(options)\n    },[currentQuestion])\n\n    return (\n        <Question question={currentQuestion[\"question\"]} choices={choices} \n        correct={currentQuestion[\"correct_answer\"]} \n        questionNumber={questionNumber} showNext={setQuestionNumber} score={score} updateScore={setScore}/>\n    )\n}\n\nexport default QuestionStack;","\nconst Scoreboard = props => {\n    return(\n        <div className=\"simple\">\n            <h1 className=\"card-header trivia text-dark bg-warning\">Score</h1>\n            <h2 className=\"card-body trivia text-dark bg-warning\">{props.score}/{props.total}</h2>\n            <button type=\"button\" className=\"btn btn-danger btn-lg quiz-button\" onClick={() => {\n                props.setScorePresent(false)\n                props.configure(false)\n            }\n            }>Play again ?\n            </button>\n        </div>\n    )\n}\n\nexport default Scoreboard;","\nconst Home = props => {\n    return(\n        <div className=\"simple\">\n            <h1 className=\"trivia\">Trivia All Day, All Night</h1>\n            <button type=\"button\" class=\"btn btn-danger btn-lg quiz-button\" \n            onClick={() => props.start(true)}>Start\n            </button>\n        </div>\n    )\n}\n\nexport default Home;","\nconst BadInput = props => {\n\n    return(\n        <div className=\"simple\">\n            <h1 className=\"trivia\">Eeeks, I don't have that many questions!</h1>\n            <button type=\"button\" className=\"btn btn-danger btn-lg bad-button\" onClick={() => {\n                props.setScorePresent(false)\n                props.configure(false)\n            }\n            }>Go back\n            </button>\n        </div>\n    )\n}\n\nexport default BadInput;","/**\n * Citation: Referred Prof's lab6 code.\n * \n * @returns The loading component\n */\nconst Loading = () => \n    <div className=\"loading\">\n        <div className=\"spinner-border spinner-border-xl text-info\" role=\"status\"/>\n        <p>Searching... please hold</p>\n    </div>\n\nexport default Loading;","import Configure from \"./Configure\"\nimport QuestionStack from \"./QuestionStack\"\nimport Scoreboard from \"./Scoreboard\"\nimport Home from \"./Home\"\nimport BadInput from \"./BadInput\"\nimport Loading from \"./Loading\"\n\nconst Setup = (props) => {\n\n    if (!props.started) {\n        return (<Home start={props.start}/>)\n\n    } else if (props.scorePresent) {\n        return (<Scoreboard score={props.score} total={props.total} configure={props.configure} setScorePresent={props.setScorePresent}/>)\n\n    } else if (!props.configured){\n        return (<Configure fetch={props.fetch} configured={props.configured}/>)\n\n    } else {\n        return (\n            (props.response === 0)?\n            <QuestionStack results={props.results} clearResults={props.clearResults} setScore={props.setScore} \n            setTotal={props.setTotal} setScorePresent={props.setScorePresent}/>\n            :(props.response === 1 || props.response === 2)? <BadInput configure={props.configure} \n            setScorePresent={props.setScorePresent}/>:<Loading />\n        )\n    }\n}\n\nexport default Setup;","import {useState} from 'react';\nimport Setup from \"../components/Setup\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst requestActivity = async (url) => {\n    let response = await fetch(url);\n    let activityData = await response.json();\n    return activityData\n}\n\nconst App = () => {\n    \n    const [started, setStarted] = useState(false);\n    const [configured, setConfigured] = useState(false);\n    const [data, setData] = useState([]);\n    const [scorePresent, setScorePresent] = useState(false);\n    const [score, setScore] = useState(0)\n    const [total, setTotal] = useState(0)\n    \n    const baseURL = \"https://opentdb.com/api.php?amount=\"\n\n    const startQuiz = (numOfQuestions, category, difficulty, type) => {\n        let url = baseURL+numOfQuestions;\n\n        if (category !== \"Any Category\") {\n            url = url + \"&category=\" + category\n        }\n        \n        if (difficulty !== \"Any Difficulty\") {\n            url = url + \"&difficulty=\" + difficulty.trim()\n        }\n        \n        if (type !== \"Any Type\") {\n            url = url + \"&type=\" + type.trim()\n        }\n        \n        requestActivity(url).then(current => {\n            console.log(current)\n            setData(current)\n        })\n        setConfigured(true)\n    }\n\n    return (\n        <div id=\"home\" className=\"main\">\n            <nav className=\"navbar navbar-light\">\n                <div className=\"container-fluid\">\n                    <a className=\"navbar-brand mx-auto font\" href=\"#home\" onClick={()=>{\n                        setConfigured(false)\n                        setStarted(false)\n                        setScorePresent(false)\n                        }}>\n                        Trivia Land\n                    </a>\n                </div>\n            </nav>\n            <div className=\"container-fluid\">\n                <div>\n                    <Setup started={started} start={setStarted} configured={configured} configure={setConfigured} \n                    fetch={startQuiz} results={data[\"results\"]} clearResults={setData} response={data[\"response_code\"]}\n                    score={score} setScore={setScore} total={total} setTotal={setTotal} \n                    scorePresent={scorePresent} setScorePresent={setScorePresent}/>\n                </div>\n            </div>\n        </div>\n      )\n}\n\n    \n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/styles.css';\nimport App from './views/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}